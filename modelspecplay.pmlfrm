import 'GridControl'
handle any
endhandle

setup form !!modelspecplay resize
	using namespace 'Aveva.Core.Presentation'
	
	frame .tabset TABSET '' anchor all
		frame .framOverview 'Overview' dock fill
			button .buRefresh 'Refresh' at xmin ymax callback '!this.Refresh()'
			
			frame .f1 'Found valve groups' anchor left at xmin ymax + 0.5
				container .conValveTypesGrid PmlNetControl 'valvestypes' width 45 height 14
			exit
			frame .f2 'Vales in group' at xmin ymax + 0.5
				container .conValveSizesGrid PmlNetControl 'valvesizes' width 45 height 14
			exit
			frame .f3 'Writable specs' anchor left at xmax.f1 + 2 ymin.f1
				container .conWritableSpecs PmlNetControl 'specs'  width 45 height 14
			exit
			frame .f4 'Valves in spec'at xmin ymax + 0.5
				container .conValvesInWritableSpec PmlNetControl 'valvesinspecs' width 45 height 14
			exit
			
			button .buIncludeInSpec '> Include selected valves ' at xmin - 14 ymax.f2  callback '!this.IncludeSelected()'
		exit
		frame .framBuild 'Create/Modify Group' dock fill
			button .buCMSelect 'Select/Create Group(Zone)' at xmin ymax + 0.5 callback '!this.CMSelectCreate()'
			text .textCreateCe  tagwid 3 ''  at xmax + 0.5 ymin width 15 is string
			
			
			text .textDetailText  tagwid 8 'Detail text'  at xmin.buCMSelect ymax.buCMSelect + 1 width 15 is string
			text .textMaterial  tagwid 8 'Material'  at xmin ymax + 0.5 width 15 is string
			text .textSkey  tagwid 8 'Skey'  at xmin ymax + 0.5 width 5 is string
			text .textStype  tagwid 8 'Stype'  at xmin ymax + 0.5 width 5 is string
			button .buCMModify 'Modify' at xmin ymax + 0.5 callback '!this.CMModify()'
		exit
	exit
		
	member .ValveTypesGrid is NetGridControl
	member .ValveTypeSizes is NetGridControl
	member .WritableSpecs is NetGridControl
	member .ValvesInWritableSpec is NetGridControl

	menu .menuValveTypes popup
		!this.menuValveTypes.add( 'callback', 'Select', '!this.Select()' )
		
		
	menu .menuValveSizes popup
		!this.menuValveSizes.add( 'callback', 'Add + Select', '!this.AddSelect()' )
	
	
exit


define method .modelspecplay()
	using namespace 'Aveva.Core.Presentation'

	!this.ValveTypesGrid= object NetGridControl() 
	!this.conValveTypesGrid.control = !this.ValveTypesGrid.handle()
	!this.ValveTypesGrid.columnExcelFilter(false)
	!this.ValveTypesGrid.bulkEditableGrid(false)
	!this.ValveTypesGrid.outlookGroupStyle(false)
	!this.ValveTypesGrid.addeventhandler('OnPopup', !this, 'valveTypesOnPopup')
	!this.ValveTypesGrid.addeventhandler('AfterSelectChange', !this, 'afterSelectChangeValveTypes')

	!this.ValveTypeSizes = object NetGridControl() 
	!this.conValveSizesGrid.control = !this.ValveTypeSizes.handle()
	!this.ValveTypeSizes.columnExcelFilter(false)
	!this.ValveTypeSizes.bulkEditableGrid(false)
	!this.ValveTypeSizes.outlookGroupStyle(false)
	!this.ValveTypeSizes.addeventhandler('OnPopup', !this, 'valveSizesOnPopup')
	!this.ValveTypeSizes.addeventhandler('AfterSelectChange', !this, 'afterSelectChangeValveSizes')
	
	!this.WritableSpecs= object NetGridControl() 
	!this.conWritableSpecs.control = !this.WritableSpecs.handle()
	!this.WritableSpecs.columnExcelFilter(false)
	!this.WritableSpecs.bulkEditableGrid(false)
	!this.WritableSpecs.outlookGroupStyle(false)
	!this.WritableSpecs.addeventhandler('AfterSelectChange', !this, 'afterSelectChangeWritableSpecs')
	
	!this.ValvesInWritableSpec= object NetGridControl() 
	!this.conValvesInWritableSpec.control = !this.ValvesInWritableSpec.handle()
	!this.ValvesInWritableSpec.columnExcelFilter(false)
	!this.ValvesInWritableSpec.bulkEditableGrid(false)
	!this.ValvesInWritableSpec.outlookGroupStyle(false)
	
	!this.formTitle = 'modelspecplay'
	!this.cancelcall  = '!this.closecall()'
	
	!this.Refresh()
endmethod

define method .Refresh()
	!zones = !!CollectAllFor('ZONE','FUNC OF SITE EQ |AMTP|',WORLD)	
	!this.ExtractAndBindValeTypesGrid(!zones)
	!specs = !!CollectAllFor('SPEC','UNSET(PROJID OF DBREF)',WORLD)	
	!this.ExtractAndSpecsGrid(!specs)		
endmethod

define method .ExtractAndBindValeTypesGrid(!zones is array)
	using namespace 'Aveva.Core.Presentation'
	
	!headings = Object Array()
	!headings.Append('Name')
	!headings.Append('Text')
	!headings.Append('Material')
	!headings.Append('Skey')
	!headings.Append('Stype')
	
	!rows = object array()
	do !z values !zones
		!dtxt = !!CollectAllFor('TEXT','PURP EQ |DTXT|',!z).first()
		!mtxt = !!CollectAllFor('TEXT','PURP EQ |MTXT|',!z).first()
		!skey = !!CollectAllFor('TEXT','PURP EQ |SKEY|',!z).first()
		!stype = !z.func
		!row = object array()
		!row.append(!z.name)
		!row.append(!dtxt.stext)
		!row.append(!mtxt.stext)
		!row.append(!skey.stext)
		!row.append(!stype)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('branch', !headings, !rows)
	!this.ValveTypesGrid.BindToDataSource(!nds)
endmethod
define method .ExtractAndSpecsGrid(!specs is array)
	using namespace 'Aveva.Core.Presentation'
	
	!headings = Object Array()
	!headings.Append('Name')
	!headings.Append('Description')
	
	!rows = object array()
	do !s values !specs		
		!row = object array()
		!row.append(!s.name)
		!row.append(!s.description)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('branch', !headings, !rows)
	!this.WritableSpecs.BindToDataSource(!nds)
endmethod

define method .IncludeSelectedDebug()
	import 'modelcatalogue'
	handle(1000,0)
	endhandle
	using NameSpace 'modelcatalogue'

	-- create scom
	!test = object ffscc()
	-- equi name / spec name
	!test.Include('/leif-xxx','/wwewe')


	-- include in spec
endmethod

define method .IncludeSelected()
	import 'modelcatalogue'
	handle(1000,0)
	endhandle
	using NameSpace 'modelcatalogue'

	-- create scom
	!test = object ffscc()
	!spec = !this.WritableSpecs.GETSELECTEDROWS()[1][1]
	do !selected values !this.ValveTypeSizes.GETSELECTEDROWS()
		!name = !selected[1]
		!test.Include(!name, !spec)
	enddo
endmethod

define method .valveTypesOnPopup(!data is ARRAY)
  !this.conValveTypesGrid.popup = !this.menuValveTypes
  !this.conValveTypesGrid.showPopup(!data[0], !data[1])
endmethod

define method .valveSizesOnPopup(!data is ARRAY)
  !this.conValveSizesGrid.popup = !this.menuValveSizes
  !this.conValveSizesGrid.showPopup(!data[0], !data[1])
endmethod

define method .select() 
	!valveType = !this.ValveTypesGrid.GetSelectedRows()[1][1]
	$!valveType
endmethod

define method .AddSelect()
	!valveType = !this.ValveTypeSizes.GetSelectedRows()[1][1]
	ADD $!valveType
	$!valveType
endmethod


define method .afterSelectChangeValveTypes(!a is ARRAY)
	--q var !this.ValveTypesGrid.GETSELECTEDROWS()
	!branch = !this.ValveTypesGrid.GETSELECTEDROWS()[1][1]
	handle any
	elsehandle none
		--$!branch
		!this.ExtractAndBindValeTypesSizesGrid(!branch.dbref())
	endhandle
	
	--q var !a[0][1]
endmethod

define method .ExtractAndBindValeTypesSizesGrid(!zone is dbref)
	!equis = !!CollectAllFor('EQUI','',!zone)
	using namespace 'Aveva.Core.Presentation'
	
	!headings = Object Array()
	!headings.append('Name')
	!headings.Append('Size')
	!headings.Append('Connection')
	!headings.Append('Bolting')
	--!headings.Append('skey')
	
	!rows = object array()
	do !e values !equis
		-- TODO: check all not only first
		!nozzle = !!CollectAllFor('NOZZ','',!e).first()
		--!skey = !!CollectAllFor('TEXT','PURP EQ |SKEY|',!z).first()
		
		!row = object array()
		!row.append(!e.name)
		!row.append(!nozzle.ppbore[1].string())
		!row.append(!nozzle.ppcon[1].string())
		if !nozzle.catref.catref.Blrfarray.unset() then
			!row.append('N/A')
		else
			!row.append(!nozzle.catref.catref.Blrfarray.first().name)
		endif

		--!row.append(!skey.stext)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('x', !headings, !rows)
	!this.ValveTypeSizes.BindToDataSource(!nds)
endmethod

define method .afterSelectChangeValveSizes(!a is ARRAY)
	!type = !this.ValveTypeSizes.GETSELECTEDROWS()[1][1]
	handle any
	elsehandle none
	endhandle
endmethod

define method .afterSelectChangeWritableSpecs(!a is ARRAY)
	!spec = !this.WritableSpecs.GETSELECTEDROWS()[1][1]
	handle any
	elsehandle none
		!this.ExtractAndBindValesInWritableSpecGrid(!spec.dbref())
	endhandle
endmethod

define method .ExtractAndBindValesInWritableSpecGrid(!spec is dbref)
	using namespace 'Aveva.Core.Presentation'
	!seles = !!CollectAllFor('SELE','TANS EQ |VALV|',!spec)
	
	!spcos = object array()
	-- gtype?
	do !sele values !seles
		!spcos.appendArray(!!CollectAllFor('SPCO','',!sele))
	enddo
	

	!headings = Object Array()
	!headings.Append('Stype')
	!headings.Append('Detail text')
	!headings.Append('Size')
	!headings.Append('Bolting')
	!headings.Append('GType')
	--!headings.Append('skey')
	
	!rows = object array()
	do !s values !spcos
		!row = object array()
		!row.append(!s.stype)
		!row.append(!s.dtxr)
		handle any
			$p error $!s
			skip
		endhandle
		!row.append(!s.ppbore[1].real().value())
		if !s.catref.Blrfarray.unset() then
			!row.append('N/A')
		else
			!row.append(!s.catref.Blrfarray.first().name)
		endif
		!row.append(!s.catref.gtype)

		--!row.append(!skey.stext)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('x', !headings, !rows)
	!this.ValvesInWritableSpec.BindToDataSource(!nds)

endmethod


define method .CMSelectCreate()
	!cex = !!ce
	ZONE
	handle any
	endhandle
	
	!ce = !!ce
	if !ce.type eq 'ZONE' and !ce.owner.func.eqNoCase('AMTP') then
		!this.LoadGroup(!ce)
	elseif !ce.type eq 'SITE' and !ce.func.eqNoCase('AMTP') then
		!this.CreateGroup(!ce)	
	endif
	
	!!ce = !cex
endmethod
define method .CMModify()
	!zone = !this.textCreateCe.val.dbref()
	handle any
		!!Alert.Warning('Invalid name of group')
		return
	endhandle
	
	!dtxt = !!CollectAllFor('TEXT','PURP EQ |DTXT|',!zone).first()
	handle any
		$!zone
		NEW TEXT PURP DTXT
		!dtxt = !!ce
	endhandle
	!mtxt = !!CollectAllFor('TEXT','PURP EQ |MTXT|',!zone).first()
	handle any
		$!zone
		NEW TEXT PURP MTXT
		!mtx = !!ce
	endhandle
	!skey = !!CollectAllFor('TEXT','PURP EQ |SKEY|',!zone).first()
	handle any
		$!zone
		NEW TEXT PURP SKEY
		!skey = !!ce
	endhandle
	
	!dtxt.stext = !this.textDetailText.val
	!mtxt.stext = !this.textMaterial.val
	!skey.stext = !this.textSkey.val
	!zone.func = !this.textStype.val
endmethod
define method .LoadGroup(!zone is dbref)
	!this.textCreateCe.val = !zone.name
	
	!dtxt = !!CollectAllFor('TEXT','PURP EQ |DTXT|',!zone).first().stext
	handle any
		$!zone
		NEW TEXT PURP DTXT
		!dtxt = ''
	endhandle
	!mtxt = !!CollectAllFor('TEXT','PURP EQ |MTXT|',!zone).first().stext
	handle any
		$!zone
		NEW TEXT PURP MTXT
		!mtxt = ''
	endhandle
	!skey = !!CollectAllFor('TEXT','PURP EQ |SKEY|',!zone).first().stext
	handle any
		$!zone
		NEW TEXT PURP SKEY
		!skey = ''
	endhandle
	!stype = !zone.func
	
	!this.textDetailText.val = !dtxt
	!this.textMaterial.val = !mtxt
	!this.textSkey.val = !skey
	!this.textStype.val = !stype
endmethod

define method .CreateGroup(!site is dbref)
	$!site
	NEW ZONE
	!name = !this.textCreateCe.val
	if !name.substring(1,1) ne '/' then
		!name = '/' + !name
	endif
	NAME $!name
	handle any
		!!Alert.Error(!name + ' is not a valid name')
		DELETE ZONE
		return
	endhandle
	
	!zone = !!ce
	!this.LoadGroup(!zone)
	
endmethod