import 'GridControl'
handle any
endhandle

import 'cep_epp'
handle(1000,0)
endhandle

setup form !!modelspecplay resize
	using namespace 'Aveva.Core.Presentation'
	using NameSpace 'cep_epp'	
	
	button .buRefresh 'Refresh' at xmin ymax callback '!this.Refresh()'
	container .conValeTypes PmlNetControl 'valvestypes' anchor left at xmin ymax width 40 height 14
	--button .buAddNewType 'Add new type' at xmin.conValeTypes ymax.conValeTypes callback '!this.AddNewType()'
	container .conValeTypeSizes PmlNetControl 'valvesizes' at xmin ymax width 40 height 14
	--exit
	container .conWritableSpecs PmlNetControl 'specs' anchor left at xmax.conValeTypes ymin.conValeTypes width 40 height 14
	--text .texType 'Type' at xmin ymax + 1 width 20 is string
	--text .texSType 'SType' at xmin ymax width 20 is string
	--button .buIncludeDebug 'Include debug static' at xmin ymax callback '!this.IncludeSelectedDebug()'
	button .buIncludeInSpec 'Include selected sizes' at xmin ymax callback '!this.IncludeSelected()'
	container .conValvesInWritableSpec PmlNetControl 'valvesinspecs' anchor left at xmin ymax width 40 height 14
	member .ValvesTypes is NetGridControl
	member .ValveTypeSizes is NetGridControl
	member .WritableSpecs is NetGridControl
	member .ValvesInWritableSpec is NetGridControl


	menu .pipegridPopup popup
		--!this.pipegridPopup.add( 'CALLBACK', 'Delete rows', '!this.DeleteRow()' ) 
		!this.pipegridPopup.add( 'MENU', 'Set insulation', 'insulationMenu' )
		!this.pipegridPopup.add( 'MENU', 'Set purpose', 'pipepurposeMenu' )
		!this.pipegridPopup.add( 'MENU', 'Set insulation type UDA', 'pipeinsuTypeMenu' )
		!this.pipegridPopup.add( 'MENU', 'Set insulation spec UDA', 'pipeinsuSpecMenu' )
		--!this.pipegridPopup.add( 'Toggle' ,'Active/Inactive', '!this.toggle(', 'OnOff' )
		--!this.pipepipegridPopup.add( 'CALLBACK', 'Save to Excel...', '!this.saveToExcel()' )
		--!this.pipepipegridPopup.add( 'CALLBACK', 'Import Data from Excel...', '!this.loadFromExcel()' )
		
	menu .insulationMenu popup
		!this.insulationMenu.add( 'callback', 'No insulation', '!this.SetInsulation(||)' )
	
	menu .pipepurposeMenu popup
	--!this.pipepurposeMenu.add( 'callback', 'Unset', '!this.SetAttribute(|Purpose;UNSET|)' )

	menu .pipeinsuTypeMenu popup
	--!this.pipeinsuTypeMenu.add( 'callback', 'Unset', '!this.SetInsulation(||)' )
	
	menu .pipeinsuSpecMenu popup
	--!this.pipeinsuSpecMenu.add( 'callback', 'Unset', '!this.SetInsulation(||)' )
  
  	menu .branchConnectionsGridPopup popup
		--!this.branchConnectionsGridPopup.add( 'CALLBACK', 'Delete rows', '!this.DeleteRow()' ) 
		!this.branchConnectionsGridPopup.add( 'CALLBACK', 'Commit', '!this.Connect(||)' )
		--!this.branchConnectionsGridPopup.add( 'MENU', 'Set purpose', 'pipepurposeMenu' )
		--!this.branchConnectionsGridPopup.add( 'CALLBACK', 'Connect tail', '!this.Connect(|TAIl|)' )
		--!this.branchConnectionsGridPopup.add( 'CALLBACK', 'Create off branch', '!this.CreateBranch(||)' )
		--!this.branchConnectionsGridPopup.add( 'MENU', 'Set insulation spec UDA', 'branchinsuSpecMenu' )
		--!this.branchConnectionsGridPopup.add( 'MENU', 'Set electric insulation UDA', 'branchelecinsuSpecMenu' )
		--!this.branchConnectionsGridPopup.add( 'Toggle' ,'Active/Inactive', '!this.toggle(', 'OnOff' )
	  
	menu .branchInlineItemsGridPopup popup
		--!this.branchInlineItemsGridPopup.add( 'CALLBACK', 'Delete rows', '!this.DeleteRow()' ) 
		!this.branchInlineItemsGridPopup.add( 'CALLBACK', 'Create inline', '!this.CreateInline(||)' )
		
	menu .branchinsuTypeMenu popup
	
	menu .branchinsuSpecMenu popup
	
	menu .branchelecinsuSpecMenu popup


	--button .button1 'Add Pipes' at 0 0 width 10 height 1 callback '!this.AddPipes(!!CE)'
	
	
	--button .button2 'Load path for branch' callback '!this.LoadPathForBranch()'
	--button .button3 'Draw next path for branch' callback '!this.DrawNextPath()'
	
	--toggle .useOriginalStart 'Original Start' at xmin.button2 ymax.button2
	--text .text1 'Compare Mill ID:.' at xmin ymax width 50 is string
	--text .text2 'PathIndex:' at xmin ymax width 50 is string
	--toggle .ttoggletrackGridSelection 'Track grid selection' at xmax.button1+0.2 ymin call '!this.toggletrackGridSelection()'
	--button .button2 'Save to Excel' at xmax ymin width 10 height 1 callback '!this.SaveToXls()'
	--button .button3 'Import from Excel' at xmax ymin width 15 height 1 callback '!this.OpenImport()'
	--button .button4 'Reset' at xmax ymin width 15 height 1 callback '!this.Reset()'

	--container .pipepipeGridFrame PmlNetControl 'grid' dock fill width 30 height 20
	
	--container .branchConnectionsGridFrame PmlNetControl 'branchconnectiongrid' anchor right at xmax.branchGridFrame ymin width 40 height 20

	
	!this.externalcall = '!!evapIpaUI.extevent('	
exit

define method .extevent(!dummy is REAL, !command is STRING)
     -- !command is the string sent from the external application
     $!command
endmethod

define method .modelspecplay()
	using namespace 'Aveva.Core.Presentation'
	--using NameSpace 'cep_epp'
	--!this.eppp = object EppPdms()
	!this.ValvesTypes= object NetGridControl() 
	!this.conValeTypes.control = !this.ValvesTypes.handle()
	!this.ValvesTypes.columnExcelFilter(false)
	!this.ValvesTypes.bulkEditableGrid(false)
	!this.ValvesTypes.outlookGroupStyle(false)
	!this.ValvesTypes.addeventhandler('OnPopup', !this, 'rightClickGrid')
	!this.ValvesTypes.addeventhandler('AfterSelectChange', !this, 'afterSelectChangeValveTypes')

	!this.ValveTypeSizes = object NetGridControl() 
	!this.conValeTypeSizes.control = !this.ValveTypeSizes.handle()
	!this.ValveTypeSizes.columnExcelFilter(false)
	!this.ValveTypeSizes.bulkEditableGrid(false)
	!this.ValveTypeSizes.outlookGroupStyle(false)
	!this.ValveTypeSizes.addeventhandler('OnPopup', !this, 'branchrightClickGrid')
	!this.ValveTypeSizes.addeventhandler('AfterSelectChange', !this, 'afterSelectChangeValveTypeSizes')
	
	
	!this.WritableSpecs= object NetGridControl() 
	!this.conWritableSpecs.control = !this.WritableSpecs.handle()
	!this.WritableSpecs.columnExcelFilter(false)
	!this.WritableSpecs.bulkEditableGrid(false)
	!this.WritableSpecs.outlookGroupStyle(false)
	!this.WritableSpecs.addeventhandler('AfterSelectChange', !this, 'afterSelectChangeWritableSpecs')
	
	!this.ValvesInWritableSpec= object NetGridControl() 
	!this.conValvesInWritableSpec.control = !this.ValvesInWritableSpec.handle()
	!this.ValvesInWritableSpec.columnExcelFilter(false)
	!this.ValvesInWritableSpec.bulkEditableGrid(false)
	!this.ValvesInWritableSpec.outlookGroupStyle(false)
	
	!this.formTitle = 'modelspecplay'
	!this.cancelcall  = '!this.closecall()'

	!this.texType.val = 'VALV'
	!this.texSType.val = 'VAAA'
	
	--!this.trackingGridSelection = false
  
  	--!this.pipegrid.EDITABLEGRID(TRUE)
	--!this.pipegrid.BulkEditableGrid(true)
	
	--!this.evapIpa = object evapIpa('')
	
	!this.Refresh()
endmethod

define method .Refresh()
	!zones = !!CollectAllFor('ZONE','FUNC EQ |AMTP|',WORLD)	
	--q var !zones
	!this.ExtractAndBindValeTypesGrid(!zones)
	
	--q all spec wi unset(projid of dbref)
	!specs = !!CollectAllFor('SPEC','UNSET(PROJID OF DBREF)',WORLD)	
	--q var !specs
	!this.ExtractAndSpecsGrid(!specs)		
endmethod

define method .ExtractAndBindValeTypesGrid(!zones is array)
	using namespace 'Aveva.Core.Presentation'
	
	!headings = Object Array()
	!headings.Append('Name')
	!headings.Append('Detail')
	!headings.Append('Material')
	!headings.Append('skey')
	
	!rows = object array()
	do !z values !zones
		!dtxt = !!CollectAllFor('TEXT','PURP EQ |DTXT|',!z).first()
		!mtxt = !!CollectAllFor('TEXT','PURP EQ |MTXT|',!z).first()
		!skey = !!CollectAllFor('TEXT','PURP EQ |SKEY|',!z).first()
		
		!row = object array()
		!row.append(!z.name)
		!row.append(!dtxt.stext)
		!row.append(!mtxt.stext)
		!row.append(!skey.stext)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('branch', !headings, !rows)
	!this.ValvesTypes.BindToDataSource(!nds)
endmethod
define method .ExtractAndSpecsGrid(!specs is array)
	using namespace 'Aveva.Core.Presentation'
	
	!headings = Object Array()
	!headings.Append('Name')
	!headings.Append('Description')
	
	!rows = object array()
	do !s values !specs		
		!row = object array()
		!row.append(!s.name)
		!row.append(!s.description)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('branch', !headings, !rows)
	!this.WritableSpecs.BindToDataSource(!nds)
endmethod

define method .IncludeSelectedDebug()
	import 'modelcatalogue'
	handle(1000,0)
	endhandle
	using NameSpace 'modelcatalogue'

	-- create scom
	!test = object ffscc()
	-- equi name / spec name
	!test.Include('/leif-xxx','/wwewe')


	-- include in spec
endmethod

define method .IncludeSelected()
	import 'modelcatalogue'
	handle(1000,0)
	endhandle
	using NameSpace 'modelcatalogue'

	-- create scom
	!test = object ffscc()
	!spec = !this.WritableSpecs.GETSELECTEDROWS()[1][1]
	--q var !this.ValveTypeSizes.GETSELECTEDROWS()
	do !selected values !this.ValveTypeSizes.GETSELECTEDROWS()
		!name = !selected[1]
		
		!test.Include(!name, !spec)
	enddo

endmethod

    
define method .rightClickGrid(!data is ARRAY)
  !this.pipeGridFrame.popup = !this.pipegridPopup
  --!this.selectedElementsA = !data[2]
  !this.pipeGridFrame.showPopup(!data[0], !data[1])
  !this.activeGridName ='PIPE'
  ----q var  !data[2]
endmethod
define method .branchrightClickGrid(!data is ARRAY)
  !this.branchConnectionsGridFrame.popup = !this.branchConnectionsGridPopup
  --!this.selectedElementsA = !data[2]
  !this.branchConnectionsGridFrame.showPopup(!data[0], !data[1])
  !this.activeGridName ='BRANCH'
  ----q var  !data[2]
endmethod
define method .branchInlinerightClickGrid(!data is ARRAY)
  !this.branchInlineItemsGridFrame.popup = !this.branchInlineItemsGridPopup
  --!this.selectedElementsA = !data[2]
  !this.branchInlineItemsGridFrame.showPopup(!data[0], !data[1])
  !this.activeGridName ='BRANCH'
  ----q var  !data[2]
endmethod


define method .afterSelectChangeValveTypes(!a is ARRAY)
	--q var !this.ValvesTypes.GETSELECTEDROWS()
	!branch = !this.ValvesTypes.GETSELECTEDROWS()[1][1]
	handle any
	elsehandle none
		--$!branch
		!this.ExtractAndBindValeTypesSizesGrid(!branch.dbref())
	endhandle
	
	--q var !a[0][1]
endmethod

define method .ExtractAndBindValeTypesSizesGrid(!zone is dbref)
	!equis = !!CollectAllFor('EQUI','',!zone)
	using namespace 'Aveva.Core.Presentation'
	
	!headings = Object Array()
	!headings.append('Name')
	!headings.Append('Size')
	!headings.Append('Connection')
	!headings.Append('Bolting')
	--!headings.Append('skey')
	
	!rows = object array()
	do !e values !equis
		-- TODO: check all not only first
		!nozzle = !!CollectAllFor('NOZZ','',!e).first()
		--!skey = !!CollectAllFor('TEXT','PURP EQ |SKEY|',!z).first()
		
		!row = object array()
		!row.append(!e.name)
		!row.append(!nozzle.ppbore[1].string())
		!row.append(!nozzle.ppcon[1].string())
		if !nozzle.catref.catref.Blrfarray.unset() then
			!row.append('N/A')
		else
			!row.append(!nozzle.catref.catref.Blrfarray.first().name)
		endif

		--!row.append(!skey.stext)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('x', !headings, !rows)
	!this.ValveTypeSizes.BindToDataSource(!nds)
endmethod

define method .afterSelectChangeValveTypeSizes(!a is ARRAY)
	--$p afterSelectChangeValveTypeSizes
	--q var !this.ValveTypeSizes.GETSELECTEDROWS()
	!type = !this.ValveTypeSizes.GETSELECTEDROWS()[1][1]
	handle any
	elsehandle none
		--$!branch
		--!this.ExtractAndBindValeTypesSizesGrid(!branch.dbref())
	endhandle
	--q var !type
	--!this.BindDataToBranchGrid(!branches)
	--q var !a[0][1]
	--!this.activeGridName = 'BRANCH' 	
endmethod

define method .afterSelectChangeWritableSpecs(!a is ARRAY)
	--q var !this.WritableSpecs.GETSELECTEDROWS()
	!spec = !this.WritableSpecs.GETSELECTEDROWS()[1][1]
	handle any
	elsehandle none
		--$!branch
		!this.ExtractAndBindValesInWritableSpecGrid(!spec.dbref())
	endhandle
	--q var !spec	
endmethod

define method .ExtractAndBindValesInWritableSpecGrid(!spec is dbref)
	using namespace 'Aveva.Core.Presentation'
	!seles = !!CollectAllFor('SELE','TANS EQ |VALV|',!spec)
	
	!spcos = object array()
	-- gtype?
	do !sele values !seles
		!spcos.appendArray(!!CollectAllFor('SPCO','',!sele))
	enddo
	

	!headings = Object Array()
	!headings.Append('Stype')
	!headings.Append('Detail text')
	!headings.Append('Size')
	!headings.Append('Bolting')
	!headings.Append('GType')
	--!headings.Append('skey')
	
	!rows = object array()
	do !s values !spcos
		!row = object array()
		!row.append(!s.stype)
		!row.append(!s.dtxr)
		handle any
			$p error $!s
			skip
		endhandle
		!row.append(!s.ppbore[1].real().value())
		if !s.catref.Blrfarray.unset() then
			!row.append('N/A')
		else
			!row.append(!s.catref.Blrfarray.first().name)
		endif
		!row.append(!s.catref.gtype)

		--!row.append(!skey.stext)
		!rows.append(!row)
	enddo
	
	!nds = object NetDataSource('x', !headings, !rows)
	!this.ValvesInWritableSpec.BindToDataSource(!nds)

endmethod































define method .BindDataToGrid(!elements is array)
   using namespace  'Aveva.Core.Presentation'
   !nds = object NetDataSource('pipe', !this.headings, !elements)
   !this.branchGrid.BindToDataSource(!nds)
   --!this.pipegrid.setcolumnwidth(3,140)
endmethod

define method .BindDataToBranchGrid(!elements is array)
--q var !this.headings
	using namespace  'Aveva.Core.Presentation'
	!nds = object NetDataSource('pipe', !this.headings, !elements)
	!this.branchConnectionsGrid.BindToDataSource(!nds)
	--!this.branchgrid.setcolumnwidth(3,140)
endmethod

define method .AddyyyData(!dbryyy is DBREF, !dataA is ARRAY)

endmethod


define method .OpenImport()
	!nozzle = =23710/47403
	!catref = !nozzle.catref.catref
	
	!gmse = !catref.gmref
	!ptse = !catref.ptref
	q var !gmse
	do !geometry values !gmse.members
		if !geometry.type eq 'SCYL' then
			q var !geometry.pdistance
			q var !geometry.pdiameter
			q var !geometry.pheight
			q var !geometry.paxis
		endif
	enddo
	
			Pdistance 0
Pdiameter SUM PARAM 5 IPARAM 1
Pheight DDHEIGHT
Paxis X
			
			
endmethod

define method .SetGridColoursPerRowResult(!rRowIndex is REAL, !rStartIndex is REAL, !aResults is ARRAY)

endmethod


define method .SetAttributes(!object is DBREF, !rStartIndex is REAL, !aAttributes is ARRAY, !aHeadings is ARRAY) is ARRAY

endmethod


define method .changeSpecConfirm(!type is STRING, !element is string)
   
  
endmethod


define method .toggletrackGridSelection()
	if !this.trackingGridSelection then
		!this.trackingGridSelection = false
	else	
		!this.trackingGridSelection = true
	endif
endmethod
